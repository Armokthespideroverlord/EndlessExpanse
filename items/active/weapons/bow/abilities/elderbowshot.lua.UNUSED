require "/scripts/vec2.lua"
require "/items/active/weapons/crits.lua"

-- Bow primary ability
BowShot = WeaponAbility:new()

function BowShot:init()
	storage.projectiles = storage.projectiles or {}

	self.energyPerShot = self.energyPerShot or 0

	self.drawTime = 0
	self.baseDrawTime=self.drawTime
	self.modifiedDrawTime = math.max(script.updateDt(),self.baseDrawTime*(1/(1+math.max(-0.99,status.stat("bowDrawTimeBonus")))))
	self.cooldownTimer = self.cooldownTime

	self:reset()

	self.weapon.onLeaveAbility = function()
		self:reset()
	end
end

function BowShot:update(dt, fireMode, shiftHeld)
	WeaponAbility.update(self, dt, fireMode, shiftHeld)

	self.updateProjectiles()

	self.cooldownTimer = math.max(0, self.cooldownTimer - self.dt)

	if not self.weapon.currentAbility and self.fireMode == (self.activatingFireMode or self.abilitySlot) and self.cooldownTimer == 0 and (self.energyPerShot == 0 or not status.resourceLocked("energy")) then
		self:setState(self.draw)
	end
end

function BowShot:uninit()
	self:reset()
end

function BowShot:reset()
	animator.setGlobalTag("drawFrame", "0")
	self.weapon:setStance(self.stances.idle)
	status.setStatusProperty(activeItem.hand().."Firing",nil)	  
end

function BowShot:draw()
	self.weapon:setStance(self.stances.draw)

	animator.playSound("draw")
	self.modifiedDrawTime = math.max(script.updateDt(),self.baseDrawTime*(1/(1+math.max(-0.99,status.stat("bowDrawTimeBonus")))))
	status.setStatusProperty(activeItem.hand().."Firing",true)
	while self.fireMode == (self.activatingFireMode or self.abilitySlot) do
		if self.walkWhileFiring then mcontroller.controlModifiers({runningSuppressed = true}) end

		self.drawTime = self.drawTime + self.dt

		local drawFrame = math.floor(root.evalFunction(self.drawFrameSelector, self.drawTime))
		animator.setGlobalTag("drawFrame", drawFrame)
		self.stances.draw.frontArmFrame = self.drawArmFrames[drawFrame + 1]

		coroutine.yield()
	end

	self:setState(self.fire)
end

function BowShot:fire()
	self.weapon:setStance(self.stances.fire)

	animator.stopAllSounds("draw")
	animator.setGlobalTag("drawFrame", "0")

	if not world.pointTileCollision(self:firePosition()) and status.overConsumeResource("energy", self.energyPerShot) then
		local projectileId = world.spawnProjectile(
				self:perfectTiming() and self.powerProjectileType or self.projectileType,
				self:firePosition(),
				activeItem.ownerEntityId(),
				self:aimVector(),
				false,
				self:currentProjectileParameters()
			)

		if self:perfectTiming() then
			animator.playSound("perfectRelease")
		else
			animator.playSound("release")
		end

		self.drawTime = 0

		if projectileId then
			table.insert(storage.projectiles, projectileId)
			world.sendEntityMessage(projectileId, "updateProjectile", nil)
		end

		util.wait(self.stances.fire.duration)
	end

	self.cooldownTimer = self.cooldownTime
	status.setStatusProperty(activeItem.hand().."Firing",false)							
end

function BowShot:perfectTiming()
	return self.drawTime > self.powerProjectileTime[1] and self.drawTime < self.powerProjectileTime[2]
end

function BowShot:currentProjectileParameters()
	local projectileParameters = copy(self.projectileParameters or {})
	--Load the root projectile config based on draw power level
	local projectileConfig = root.projectileConfig(self:perfectTiming() and self.powerProjectileType or self.projectileType)

	local speedMultiplier = 1.0
	if self.minMaxSpeedMultiplier then
		speedMultiplier = math.random(self.minMaxSpeedMultiplier[1] * 100, self.minMaxSpeedMultiplier[2] * 100) / 100
	end

	--Calculate projectile speed based on draw time and projectile parameters
	projectileParameters.speed = projectileParameters.speed or projectileConfig.speed
	projectileParameters.speed = projectileParameters.speed * math.min(1, (self.drawTimer/ self.modifiedDrawTime)) * speedMultiplier

	--Bonus damage calculation for quiver users
	--local damageBonus = 1.0 + status.stat("bowDrawTimeBonus") --adds the bow draw bonus back to damage to keep it on par, otherwise we lose damage
	local damageBonus = 1.0
	if self.useQuiverDamageBonus == true and status.statPositive("nebsrngbowdamagebonus") then
		damageBonus = damageBonus+status.stat("nebsrngbowdamagebonus")
	end

	--Calculate projectile power based on draw time and projectile parameters
	local drawTimeMultiplier = self.staticDamageMultiplier or math.min(1, (self.drawTimer/ self.modifiedDrawTime))
	projectileParameters.power = projectileParameters.power or projectileConfig.power
	projectileParameters.power = projectileParameters.power
		* self.baseDrawTime
		* self.weapon.damageLevelMultiplier
		* drawTimeMultiplier
		* (self.dynamicDamageMultiplier or 1)
		* damageBonus
		* ((mcontroller.onGround() and 1) or ((mcontroller.liquidMovement() and 1) or (mcontroller.zeroG() and 1) or (self.airborneBonus + status.stat("bowAirBonus"))))
		/ (self.projectileCount or 1)
	projectileParameters.powerMultiplier = activeItem.ownerPowerMultiplier()
	projectileParameters.power = Crits.setCritDamage(self,projectileParameters.power)
	return projectileParameters
end

function BowShot:aimVector()
	local aimVector = vec2.rotate({1, 0}, self.weapon.aimAngle + sb.nrand(self.inaccuracy or 0, 0))
	aimVector[1] = aimVector[1] * self.weapon.aimDirection
	return aimVector
end

function BowShot:firePosition()
	return vec2.add(mcontroller.position(), activeItem.handPosition(self.fireOffset))
end

function BowShot:updateProjectiles()
	--local aimPosition = activeItem.ownerAimPosition()
	local newProjectiles = {}
	for _, projectileId in pairs(storage.projectiles) do
		if world.entityExists(projectileId) then
			local projectileResponse = world.sendEntityMessage(projectileId, "updateProjectile", nil)
			if projectileResponse:finished() then
				local newIds = projectileResponse:result()
				if type(newIds) ~= "table" then
					newIds = {newIds}
				end
				for _, newId in pairs(newIds) do
					table.insert(newProjectiles, newId)
				end
			end
		end
	end
	storage.projectiles = newProjectiles
end
